#!/usr/bin/env python3
import os
import sys
import time
import datetime
import subprocess
import asyncio
import logging
from pathlib import Path
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from faster_whisper import WhisperModel
from playwright.async_api import async_playwright

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
RECORD_DIR = Path(os.getenv("RECORD_DIR", "/recordings"))
WHISPER_MODEL_NAME = os.getenv("WHISPER_MODEL", "medium")
MEETING_TIMEOUT_MIN = int(os.getenv("MEETING_TIMEOUT_MIN", "3"))

class AudioOnlyMeetingBot:
    def __init__(self):
        self.bot = Bot(token=BOT_TOKEN)
        self.whisper_model = None
        self.recording_process = None
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "ü§ñ **Audio Meeting Bot –∞–∫—Ç–∏–≤–µ–Ω!**\n\n"
            "‚úÖ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≤—Å—Ç—Ä–µ—á–∞–º\n"
            "‚Ä¢ –ó–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ\n"
            "‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–µ—á–∏\n"
            "‚Ä¢ Google Meet, Zoom, –Ø–Ω–¥–µ–∫—Å\n\n"
            "üîó **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É**"
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text
        
        if any(platform in text.lower() for platform in ['meet.google.com', 'zoom.us', 'telemost.yandex.ru', 'talk.kontur.ru']):
            await update.message.reply_text(
                f"üéØ **–í—Å—Ç—Ä–µ—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!**\n\n"
                f"üîó **URL:** {text}\n\n"
                f"üöÄ **–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...**\n"
                f"‚è≥ –ó–∞–ø–∏—Å—ã–≤–∞—é –∞—É–¥–∏–æ {MEETING_TIMEOUT_MIN} –º–∏–Ω—É—Ç"
            )
            
            try:
                result = await self.process_meeting(text)
                
                if result:
                    await update.message.reply_text(
                        "‚úÖ **–í—Å—Ç—Ä–µ—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!**\n\n"
                        f"üìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:**\n{result['transcript'][:1000]}...\n\n"
                        f"üéôÔ∏è **–ê—É–¥–∏–æ:** {result['audio_file']}\n"
                        f"‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {result['duration']} –º–∏–Ω"
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å—Ç—Ä–µ—á–∏")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞:\n"
                "‚Ä¢ Google Meet\n"
                "‚Ä¢ Zoom\n"
                "‚Ä¢ –Ø–Ω–¥–µ–∫—Å –¢–µ–ª–µ–º–æ—Å—Ç\n"
                "‚Ä¢ –ö–æ–Ω—Ç—É—Ä.–¢–æ–ª–∫"
            )
    
    async def process_meeting(self, meeting_url: str):
        try:
            # 1. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ
            await self.join_meeting(meeting_url)
            
            # 2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
            audio_file = await self.record_audio_only()
            
            # 3. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            transcript = self.transcribe_audio(audio_file)
            
            return {
                'transcript': transcript,
                'audio_file': audio_file,
                'duration': MEETING_TIMEOUT_MIN
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}")
            return None
    
    async def join_meeting(self, meeting_url: str):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≤—Å—Ç—Ä–µ—á–µ"""
        playwright = await async_playwright().start()
        
        browser = await playwright.chromium.launch(
            headless=True,
            args=[
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-gpu",
                "--mute-audio",
                "--autoplay-policy=no-user-gesture-required",
                "--use-fake-ui-for-media-stream",
                "--use-fake-device-for-media-stream",
                "--disable-web-security",
                "--disable-features=VizDisplayCompositor"
            ]
        )
        
        context = await browser.new_context(
            viewport={"width": 1920, "height": 1080},
            permissions=["microphone", "camera"],
            user_agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        )
        
        page = await context.new_page()
        
        try:
            await page.goto(meeting_url, wait_until="load", timeout=30000)
            await asyncio.sleep(5)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω
            try:
                await page.evaluate("""
                    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É
                    const cameraButtons = document.querySelectorAll('[aria-label*="camera"], [aria-label*="Turn off camera"]');
                    for (let btn of cameraButtons) {
                        if (btn.getAttribute('aria-label')?.includes('Turn off') || btn.getAttribute('data-is-muted') === 'false') {
                            btn.click();
                            break;
                        }
                    }
                    
                    // –û—Ç–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
                    const micButtons = document.querySelectorAll('[aria-label*="microphone"], [aria-label*="Turn off microphone"]');
                    for (let btn of micButtons) {
                        if (btn.getAttribute('aria-label')?.includes('Turn off') || btn.getAttribute('data-is-muted') === 'false') {
                            btn.click();
                            break;
                        }
                    }
                """)
                await asyncio.sleep(2)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É/–º–∏–∫—Ä–æ—Ñ–æ–Ω: {e}")
            
            # –í–≤–æ–¥–∏–º –∏–º—è
            try:
                await page.fill('input[type="text"]', "Meeting Bot")
                await asyncio.sleep(1)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∏–º—è: {e}")
            
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ
            join_selectors = [
                'button:has-text("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")',
                'button:has-text("Join now")',
                'button:has-text("Join")',
                'button:has-text("–í–æ–π—Ç–∏")',
                '[jsname="Qx7uuf"]',
                'button[aria-label*="Join"]'
            ]
            
            joined = False
            for selector in join_selectors:
                try:
                    await page.click(selector, timeout=5000)
                    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {selector}")
                    joined = True
                    break
                except:
                    continue
            
            if not joined:
                # Fallback - –∏—â–µ–º –ª—é–±—É—é –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º join
                buttons = await page.query_selector_all('button')
                for button in buttons:
                    text = await button.text_content()
                    if text and any(word in text.lower() for word in ['join', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', '–≤–æ–π—Ç–∏']):
                        await button.click()
                        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ (fallback): {text}")
                        joined = True
                        break
            
            if joined:
                await asyncio.sleep(3)  # –ñ–¥–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                logger.info("–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ")
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –≤—Å—Ç—Ä–µ—á–µ: {e}")
        finally:
            await context.close()
            await browser.close()
            await playwright.stop()
    
    async def record_audio_only(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ"""
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        audio_file = RECORD_DIR / f"audio_{timestamp}.wav"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        audio_file.parent.mkdir(parents=True, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PulseAudio
        try:
            result = subprocess.run(['pulseaudio', '--check'], capture_output=True, text=True)
            if result.returncode != 0:
                logger.info("–ó–∞–ø—É—Å–∫–∞—é PulseAudio...")
                subprocess.run(['pulseaudio', '--start'], check=False)
                await asyncio.sleep(2)
        except Exception as e:
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å PulseAudio: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        try:
            result = subprocess.run(['pactl', 'list', 'short', 'sources'], capture_output=True, text=True)
            sources = result.stdout.strip().split('\n')
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {sources}")
            
            # –ò—â–µ–º monitor –∏—Å—Ç–æ—á–Ω–∏–∫
            monitor_source = None
            for source in sources:
                if 'monitor' in source:
                    monitor_source = source.split()[1]
                    break
            
            if not monitor_source:
                monitor_source = 'default'
                
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: {monitor_source}")
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            monitor_source = 'default'
        
        # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ
        cmd = [
            'ffmpeg', '-y',
            '-f', 'pulse',
            '-i', monitor_source,
            '-ac', '1',
            '-ar', '16000',
            '-t', str(MEETING_TIMEOUT_MIN * 60),
            '-loglevel', 'error',
            str(audio_file)
        ]
        
        logger.info(f"–ó–∞–ø–∏—Å—ã–≤–∞—é –∞—É–¥–∏–æ: {' '.join(cmd)}")
        
        try:
            self.recording_process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
            await asyncio.sleep(MEETING_TIMEOUT_MIN * 60)
            
            if self.recording_process:
                self.recording_process.terminate()
                self.recording_process.wait()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
            if audio_file.exists() and audio_file.stat().st_size > 0:
                logger.info(f"–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {audio_file} ({audio_file.stat().st_size} bytes)")
                return audio_file
            else:
                logger.error("–§–∞–π–ª –∑–∞–ø–∏—Å–∏ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}")
            if self.recording_process:
                self.recording_process.terminate()
            return None
    
    def transcribe_audio(self, audio_file: Path):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ"""
        if not audio_file or not audio_file.exists():
            logger.error("–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return "–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        try:
            if not self.whisper_model:
                logger.info("–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Whisper...")
                self.whisper_model = WhisperModel(WHISPER_MODEL_NAME, device="cpu", compute_type="int8")
            
            logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {audio_file}")
            segments, info = self.whisper_model.transcribe(
                str(audio_file), 
                language="ru", 
                vad=True,
                word_timestamps=True
            )
            
            text_parts = []
            for seg in segments:
                if seg.text.strip():
                    text_parts.append(f"[{seg.start:.1f}s] {seg.text.strip()}")
            
            text = "\n".join(text_parts)
            logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return text
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}"

def main():
    if not BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    bot = AudioOnlyMeetingBot()
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Audio Meeting Bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
