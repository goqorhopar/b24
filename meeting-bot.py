#!/usr/bin/env python3
"""
Meeting Bot - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ VPS
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: Google Meet, Zoom, –Ø–Ω–¥–µ–∫—Å –¢–µ–ª–µ–º–æ—Å—Ç, –ö–æ–Ω—Ç—É—Ä.–¢–æ–ª–∫
–í–µ—Ä—Å–∏—è: 2.1 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –≤—Å—é –≤—Å—Ç—Ä–µ—á—É, —É–ª—É—á—à–µ–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
"""

import os
import sys
import json
import asyncio
import logging
from datetime import datetime
from typing import Optional, Dict, Any
import subprocess
import tempfile
import re
import time
from pathlib import Path

# Selenium –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
from faster_whisper import WhisperModel

# GitHub
from github import Github

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from load_auth_data import get_auth_loader

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN', '')
GITHUB_REPO = os.getenv('GITHUB_REPO', 'goqorhopar/b24')
WHISPER_MODEL = os.getenv('WHISPER_MODEL', 'medium')
RECORD_DIR = os.getenv('RECORD_DIR', '/tmp/recordings')
MEETING_TIMEOUT_MIN = int(os.getenv('MEETING_TIMEOUT_MIN', '180'))  # 3 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–ø–∏—Å–µ–π
Path(RECORD_DIR).mkdir(parents=True, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class MeetingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Å—Ç—Ä–µ—á–∞–º–∏"""
    
    def __init__(self):
        self.driver = None
        self.recording = False
        self.audio_file = None
        self.transcript = []
        self.recording_process = None
        self.meeting_url = None
        self.start_time = None
        self.monitoring_task = None
        self.meeting_active = True
        self.auth_loader = get_auth_loader()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GitHub
        if GITHUB_TOKEN:
            try:
                self.github = Github(GITHUB_TOKEN)
                self.repo = self.github.get_repo(GITHUB_REPO)
                logger.info("GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub: {e}")
                self.github = None
                self.repo = None
        else:
            self.github = None
            self.repo = None
            logger.warning("GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Whisper –º–æ–¥–µ–ª–∏
        try:
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ Whisper –º–æ–¥–µ–ª–∏: {WHISPER_MODEL}")
            self.whisper_model = WhisperModel(WHISPER_MODEL, device="cpu", compute_type="int8")
            logger.info("Whisper –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
            self.whisper_model = None
        
    def setup_driver(self, headless=True):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è VPS"""
        options = Options()

        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è headless —Ä–µ–∂–∏–º–∞
        if headless:
            options.add_argument('--headless=new')
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--disable-software-rasterizer')
            options.add_argument('--disable-extensions')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–µ–¥–∏–∞
        options.add_argument('--use-fake-ui-for-media-stream')
        options.add_argument('--use-fake-device-for-media-stream')
        options.add_argument('--autoplay-policy=no-user-gesture-required')
        options.add_argument('--disable-blink-features=AutomationControlled')

        # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        options.add_argument('--window-size=1920,1080')
        options.add_argument('--start-maximized')

        # User agent
        options.add_argument('--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')

        # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –∫–∞–º–µ—Ä—ã
        prefs = {
            "profile.default_content_setting_values.media_stream_mic": 1,
            "profile.default_content_setting_values.media_stream_camera": 1,
            "profile.default_content_setting_values.notifications": 2,
            "profile.default_content_setting_values.geolocation": 2,
        }
        options.add_experimental_option("prefs", prefs)
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π user-data-dir –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        import tempfile
        unique_profile_dir = tempfile.mkdtemp(prefix="meetingbot_chrome_profile_")
        options.add_argument(f'--user-data-dir={unique_profile_dir}')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
        try:
            self.driver = webdriver.Chrome(options=options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            logger.info(f"Chrome –¥—Ä–∞–π–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: {unique_profile_dir}")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth_status = self.auth_loader.get_auth_status()
            logger.info(f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_status}")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            auth_files = self.auth_loader.check_auth_files_exist()
            if any(auth_files.values()):
                if self.auth_loader.setup_authenticated_driver(self.driver):
                    logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            else:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏")
                logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python simple_auth.py –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Chrome: {e}")
            raise
        
    def detect_meeting_type(self, url: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏ –ø–æ URL"""
        url_lower = url.lower()
        if 'meet.google.com' in url_lower:
            return 'google_meet'
        elif 'zoom.us' in url_lower or 'zoom.com' in url_lower:
            return 'zoom'
        elif 'telemost.yandex' in url_lower:
            return 'yandex'
        elif 'talk.contour.ru' in url_lower or 'contour.ru' in url_lower:
            return 'contour'
        elif 'teams.microsoft.com' in url_lower:
            return 'teams'
        else:
            return 'unknown'
    
    def join_google_meet(self, meeting_url: str, name: str = "Meeting Bot"):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ Google Meet —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º Google Meet: {meeting_url}")
            self.driver.get(meeting_url)
            self.meeting_url = meeting_url
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(8)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç
            if "accounts.google.com" in self.driver.current_url:
                logger.warning("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ Google –∞–∫–∫–∞—É–Ω—Ç - –≤—Å—Ç—Ä–µ—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–æ–π")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ —É–∂–µ –≤ –≤—Å—Ç—Ä–µ—á–µ
            if "meet.google.com" in self.driver.current_url and "meet.google.com/" in self.driver.current_url:
                logger.info("–£–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ Google Meet - –≤–æ–∑–º–æ–∂–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å")
                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –µ—Å–ª–∏ —É–∂–µ –≤ –≤—Å—Ç—Ä–µ—á–µ
                self._disable_media_in_meeting()
                return True
            
            # –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            try:
                name_inputs = self.driver.find_elements(By.CSS_SELECTOR, "input[type='text']")
                for inp in name_inputs:
                    placeholder = (inp.get_attribute('placeholder') or '').lower()
                    aria_label = (inp.get_attribute('aria-label') or '').lower()
                    if 'name' in placeholder or '–∏–º—è' in placeholder or 'name' in aria_label:
                        inp.clear()
                        inp.send_keys(name)
                        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∏–º—è: {name}")
                        time.sleep(1)
                        break
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∏–º—è: {e}")
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            join_clicked = False
            join_patterns = [
                ('css', "button[jsname='Qx7uuf']"),
                ('css', "button[aria-label*='Join now' i]"),
                ('css', "button[aria-label*='Ask to join' i]"),
                ('css', "button[data-is-muted='false'][aria-label*='Join']"),
                ('xpath', "//button[contains(translate(., 'JOIN', 'join'), 'join')]"),
                ('xpath', "//button[contains(., '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è')]"),
                ('xpath', "//span[contains(translate(., 'JOIN', 'join'), 'join')]/parent::button"),
                ('xpath', "//button[contains(., 'Ask to join')]"),
            ]
            
            for method, selector in join_patterns:
                try:
                    if method == 'css':
                        buttons = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    else:
                        buttons = self.driver.find_elements(By.XPATH, selector)
                    
                    for btn in buttons:
                        if btn.is_displayed() and btn.is_enabled():
                            btn.click()
                            logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {btn.text or btn.get_attribute('aria-label')}")
                            join_clicked = True
                            time.sleep(5)  # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
                            break
                    if join_clicked:
                        break
                except Exception as e:
                    logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É {selector}: {e}")
            
            if not join_clicked:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –ª—é–±—É—é –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º
                all_buttons = self.driver.find_elements(By.TAG_NAME, "button")
                for btn in all_buttons:
                    text = btn.text.lower()
                    if any(word in text for word in ['join', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', '–≤–æ–π—Ç–∏', 'ask to join']):
                        try:
                            btn.click()
                            logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {btn.text}")
                            join_clicked = True
                            time.sleep(5)
                            break
                        except:
                            pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connection_success = False
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
            if "meet.google.com" in self.driver.current_url:
                logger.info("URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ Google Meet")
                connection_success = True
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Å—Ç—Ä–µ—á–∏
            try:
                meeting_elements = self.driver.find_elements(By.CSS_SELECTOR, 
                    "div[jsname='BOHaEe'], div[data-is-muted], button[aria-label*='camera'], button[aria-label*='microphone']")
                if meeting_elements:
                    logger.info(f"–ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–µ–π: {len(meeting_elements)}")
                    connection_success = True
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Å—Ç—Ä–µ—á–∏: {e}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
            try:
                error_messages = self.driver.find_elements(By.XPATH, 
                    "//div[contains(text(), 'Unable to join') or contains(text(), 'Meeting not found') or contains(text(), 'Access denied')]")
                if error_messages:
                    logger.warning("–ù–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    connection_success = False
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ: {e}")
            
            if connection_success:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ Google Meet: {meeting_url}")
                self._disable_media_in_meeting()
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                try:
                    screenshot_path = f"/tmp/meetingbot_googlemeet_fail_{int(time.time())}.png"
                    self.driver.save_screenshot(screenshot_path)
                    logger.warning(f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω—É
                    self._send_screenshot_to_admin(screenshot_path, meeting_url)
                except Exception as err:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {err}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ Google Meet: {e}")
            return False
    
    def _disable_media_in_meeting(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ"""
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É
            camera_selectors = [
                "button[aria-label*='camera' i][data-is-muted='false']",
                "button[aria-label*='Turn off camera' i]",
                "div[jscontroller][jsaction*='camera'] button",
                "button[jsname='BOHaEe']",
                "button[data-is-muted='false'][aria-label*='camera']",
            ]
            
            for selector in camera_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for el in elements:
                        aria_label = el.get_attribute('aria-label') or ''
                        if 'camera' in aria_label.lower() and 'turn off' in aria_label.lower():
                            el.click()
                            logger.info("–ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                            time.sleep(0.5)
                            break
                except Exception as e:
                    logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É —á–µ—Ä–µ–∑ {selector}: {e}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            mic_selectors = [
                "button[aria-label*='microphone' i][data-is-muted='false']",
                "button[aria-label*='Turn off microphone' i]",
                "div[jscontroller][jsaction*='microphone'] button",
                "button[data-is-muted='false'][aria-label*='microphone']",
            ]
            
            for selector in mic_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for el in elements:
                        aria_label = el.get_attribute('aria-label') or ''
                        if ('microphone' in aria_label.lower() or 'mic' in aria_label.lower()) and 'turn off' in aria_label.lower():
                            el.click()
                            logger.info("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω")
                            time.sleep(0.5)
                            break
                except Exception as e:
                    logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω —á–µ—Ä–µ–∑ {selector}: {e}")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")
    
    def join_zoom_meeting(self, meeting_url: str, name: str = "Meeting Bot"):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ Zoom –≤—Å—Ç—Ä–µ—á–µ"""
        try:
            logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º Zoom: {meeting_url}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ zoom.us/j/123456789
            if '/j/' in meeting_url:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–∞
                if '?' in meeting_url:
                    meeting_url += '&web=1'
                else:
                    meeting_url += '?web=1'
            
            self.driver.get(meeting_url)
            self.meeting_url = meeting_url
            time.sleep(8)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Join from Browser" / "Launch Meeting"
            try:
                web_join_buttons = self.driver.find_elements(By.XPATH, 
                    "//a[contains(text(), 'Join from Browser') or contains(text(), 'Launch Meeting') or contains(text(), 'browser')]")
                for btn in web_join_buttons:
                    if btn.is_displayed():
                        btn.click()
                        logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä")
                        time.sleep(5)
                        break
            except Exception as e:
                logger.debug(f"–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
            
            # –í–≤–æ–¥–∏–º –∏–º—è
            try:
                name_input = WebDriverWait(self.driver, 15).until(
                    EC.presence_of_element_located((By.ID, "inputname"))
                )
                name_input.clear()
                name_input.send_keys(name)
                logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∏–º—è: {name}")
                time.sleep(2)
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∏–º—è: {e}")
            
            # –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Join
            join_clicked = False
            
            # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Join
            join_selectors = [
                ('id', 'joinBtn'),
                ('css', 'button[data-tooltip="Join Meeting"]'),
                ('css', 'button[aria-label="Join Meeting"]'),
                ('css', 'button[aria-label="Join"]'),
                ('css', 'button[data-tooltip="Join"]'),
                ('css', '.zm-btn--primary'),
                ('css', '.join-btn'),
                ('css', 'button[class*="join"]'),
                ('xpath', "//button[contains(text(), 'Join')]"),
                ('xpath', "//button[contains(text(), 'Join Meeting')]"),
                ('xpath', "//button[contains(text(), '–í–æ–π—Ç–∏')]"),
                ('xpath', "//button[contains(text(), '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è')]"),
                ('xpath', "//a[contains(text(), 'Join')]"),
                ('xpath', "//a[contains(text(), 'Join Meeting')]"),
            ]
            
            for method, selector in join_selectors:
                try:
                    if method == 'id':
                        elements = self.driver.find_elements(By.ID, selector)
                    elif method == 'css':
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    else:  # xpath
                        elements = self.driver.find_elements(By.XPATH, selector)
                    
                    for btn in elements:
                        if btn.is_displayed() and btn.is_enabled():
                            btn.click()
                            logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Join —á–µ—Ä–µ–∑ {method}: {selector}")
                            join_clicked = True
                            time.sleep(5)
                            break
                    if join_clicked:
                        break
                except Exception as e:
                    logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ {method} {selector}: {e}")
            
            if not join_clicked:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Join –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –ª—é–±—ã–µ –∫–Ω–æ–ø–∫–∏
                all_buttons = self.driver.find_elements(By.TAG_NAME, "button")
                for btn in all_buttons:
                    try:
                        text = btn.text.lower()
                        if any(word in text for word in ['join', '–≤–æ–π—Ç–∏', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', 'enter']):
                            if btn.is_displayed() and btn.is_enabled():
                                btn.click()
                                logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {btn.text}")
                                join_clicked = True
                                time.sleep(5)
                                break
                    except:
                        pass
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å—Ç—Ä–µ—á–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –Ω–µ–π
            time.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ
            current_url = self.driver.current_url
            logger.info(f"–¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {current_url}")
            
            # –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ –º—ã –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ
            meeting_indicators = [
                "//div[contains(@class, 'meeting-client')]",
                "//div[contains(@class, 'video-container')]",
                "//button[contains(@aria-label, 'Mute')]",
                "//button[contains(@aria-label, 'Unmute')]",
                "//div[contains(@class, 'participants')]",
                "//canvas",  # –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
                "//div[contains(@class, 'meeting')]",
                "//div[contains(@class, 'zoom')]",
            ]
            
            in_meeting = False
            found_indicators = 0
            for indicator in meeting_indicators:
                try:
                    elements = self.driver.find_elements(By.XPATH, indicator)
                    if elements:
                        logger.info(f"–ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Å—Ç—Ä–µ—á–∏: {indicator} ({len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                        found_indicators += 1
                        in_meeting = True
                except:
                    pass
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            error_indicators = [
                "//div[contains(text(), 'Meeting not found')]",
                "//div[contains(text(), 'Invalid meeting ID')]",
                "//div[contains(text(), 'Meeting has ended')]",
                "//div[contains(text(), 'Please wait for the host')]",
                "//div[contains(text(), 'Waiting for host')]",
            ]
            
            has_error = False
            for indicator in error_indicators:
                try:
                    elements = self.driver.find_elements(By.XPATH, indicator)
                    if elements:
                        logger.warning(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {indicator}")
                        has_error = True
                        break
                except:
                    pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ Zoom
            url_check = "zoom.us" in current_url and ("/j/" in current_url or "/meeting/" in current_url)
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            connection_success = (
                (in_meeting and found_indicators >= 2) or 
                (join_clicked and url_check and not has_error)
            )
            
            if connection_success:
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Zoom: {meeting_url}")
                self._disable_zoom_media()
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≤—Å—Ç—Ä–µ—á–µ")
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã={found_indicators}, –æ—à–∏–±–∫–∏={has_error}, URL={url_check}")
                try:
                    screenshot_path = f"/tmp/meetingbot_zoom_fail_{int(time.time())}.png"
                    self.driver.save_screenshot(screenshot_path)
                    logger.warning(f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
                    self._send_screenshot_to_admin(screenshot_path, meeting_url)
                except Exception as err:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {err}")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ Zoom: {e}")
            return False
    
    def _disable_zoom_media(self):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ Zoom"""
        try:
            time.sleep(3)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            mic_selectors = [
                "button[aria-label*='Mute' i]",
                "button[aria-label*='Unmute' i]",
                "button[data-tooltip*='Mute' i]",
                "button[data-tooltip*='Unmute' i]",
                ".zm-btn--mute",
                ".zm-btn--unmute"
            ]
            
            for selector in mic_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for el in elements:
                        if el.is_displayed():
                            aria_label = el.get_attribute('aria-label') or ''
                            if 'unmute' in aria_label.lower() or 'mute' in aria_label.lower():
                                el.click()
                                logger.info("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω –≤ Zoom")
                                time.sleep(1)
                                break
                except Exception as e:
                    logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω —á–µ—Ä–µ–∑ {selector}: {e}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É
            camera_selectors = [
                "button[aria-label*='Stop Video' i]",
                "button[aria-label*='Start Video' i]",
                "button[data-tooltip*='Stop Video' i]",
                "button[data-tooltip*='Start Video' i]",
                ".zm-btn--video",
                ".zm-btn--stop-video"
            ]
            
            for selector in camera_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for el in elements:
                        if el.is_displayed():
                            aria_label = el.get_attribute('aria-label') or ''
                            if 'start video' in aria_label.lower() or 'stop video' in aria_label.lower():
                                el.click()
                                logger.info("–ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ Zoom")
                                time.sleep(1)
                                break
                except Exception as e:
                    logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É —á–µ—Ä–µ–∑ {selector}: {e}")
                    
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞ –≤ Zoom: {e}")
    
    def join_yandex_telemost(self, meeting_url: str, name: str = "Meeting Bot"):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ø–Ω–¥–µ–∫—Å –¢–µ–ª–µ–º–æ—Å—Ç"""
        try:
            logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º –Ø–Ω–¥–µ–∫—Å –¢–µ–ª–µ–º–æ—Å—Ç: {meeting_url}")
            self.driver.get(meeting_url)
            self.meeting_url = meeting_url
            time.sleep(5)
            
            # –í–≤–æ–¥–∏–º –∏–º—è
            try:
                name_inputs = self.driver.find_elements(By.CSS_SELECTOR, "input[type='text']")
                for inp in name_inputs:
                    if inp.is_displayed():
                        inp.clear()
                        inp.send_keys(name)
                        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∏–º—è: {name}")
                        time.sleep(0.5)
                        break
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –∏–º—è: {e}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω
            try:
                controls = self.driver.find_elements(By.TAG_NAME, "button")
                for control in controls:
                    aria_label = (control.get_attribute("aria-label") or '').lower()
                    title = (control.get_attribute("title") or '').lower()
                    if any(word in aria_label or word in title for word in ['–∫–∞–º–µ—Ä–∞', 'camera', '–º–∏–∫—Ä–æ—Ñ–æ–Ω', 'microphone']):
                        control.click()
                        time.sleep(0.3)
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –º–µ–¥–∏–∞: {e}")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
            join_clicked = False
            join_words = ['–≤–æ–π—Ç–∏', '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', 'join', 'enter']
            
            buttons = self.driver.find_elements(By.TAG_NAME, "button")
            for btn in buttons:
                text = btn.text.lower()
                if any(word in text for word in join_words) and btn.is_displayed():
                    try:
                        btn.click()
                        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {btn.text}")
                        join_clicked = True
                        time.sleep(3)
                        break
                    except:
                        pass
            
            if join_clicked or 'telemost.yandex' in self.driver.current_url:
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –Ø–Ω–¥–µ–∫—Å –¢–µ–ª–µ–º–æ—Å—Ç: {meeting_url}")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞")
                try:
                    screenshot_path = f"/tmp/meetingbot_yandex_fail_{int(time.time())}.png"
                    self.driver.save_screenshot(screenshot_path)
                    logger.warning(f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
                    self._send_screenshot_to_admin(screenshot_path, meeting_url)
                except Exception as err:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {err}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –Ø–Ω–¥–µ–∫—Å –¢–µ–ª–µ–º–æ—Å—Ç: {e}")
            return False
    
    def join_contour_talk(self, meeting_url: str, name: str = "Meeting Bot"):
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ö–æ–Ω—Ç—É—Ä.–¢–æ–ª–∫"""
        try:
            logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º –ö–æ–Ω—Ç—É—Ä.–¢–æ–ª–∫: {meeting_url}")
            self.driver.get(meeting_url)
            self.meeting_url = meeting_url
            time.sleep(5)
            # –í–≤–æ–¥–∏–º –∏–º—è –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            try:
                name_inputs = self.driver.find_elements(By.CSS_SELECTOR, "input[type='text'], input[type='name']")
                for inp in name_inputs:
                    if inp.is_displayed():
                        inp.clear()
                        inp.send_keys(name)
                        logger.info(f"–í–≤–µ–¥–µ–Ω–æ –∏–º—è: {name}")
                        break
            except Exception as e:
                logger.debug(f"–ü–æ–ª–µ –∏–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            join_patterns = [
                ('xpath', "//button[contains(., '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è')]") ,
                ('xpath', "//button[contains(., '–í–æ–π—Ç–∏')]") ,
                ('xpath', "//button[contains(., 'Join')]") ,
            ]
            for method, selector in join_patterns:
                try:
                    buttons = self.driver.find_elements(By.XPATH, selector)
                    for btn in buttons:
                        if btn.is_displayed():
                            btn.click()
                            logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                            time.sleep(3)
                            return True
                except:
                    pass
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ö–æ–Ω—Ç—É—Ä.–¢–æ–ª–∫")
            try:
                screenshot_path = f"/tmp/meetingbot_contour_fail_{int(time.time())}.png"
                self.driver.save_screenshot(screenshot_path)
                logger.warning(f"–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
                self._send_screenshot_to_admin(screenshot_path, meeting_url)
            except Exception as err:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {err}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ö–æ–Ω—Ç—É—Ä.–¢–æ–ª–∫: {e}")
            return False
    def _verify_real_meeting_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤—Å—Ç—Ä–µ—á–µ"""
        try:
            if not self.driver:
                logger.warning("–î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            current_url = self.driver.current_url
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. URL: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ
            meeting_platforms = ['meet.google.com', 'zoom.us', 'telemost.yandex', 'talk.contour.ru']
            in_meeting_platform = any(platform in current_url for platform in meeting_platforms)
            
            if not in_meeting_platform:
                logger.warning("–ù–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –≤—Å—Ç—Ä–µ—á–∏")
                return False
            
            # –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏
            meeting_indicators = [
                # Google Meet
                "video[src*='blob:']",  # –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫
                "audio[src*='blob:']",  # –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫
                "div[jsname='BOHaEe']",  # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                "div[data-is-muted]",  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
                
                # Zoom
                "canvas",  # –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
                "div[class*='meeting-client']",  # –ö–ª–∏–µ–Ω—Ç –≤—Å—Ç—Ä–µ—á–∏
                "button[aria-label*='Mute']",  # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                
                # –û–±—â–∏–µ
                "video",  # –õ—é–±–æ–µ –≤–∏–¥–µ–æ
                "audio",  # –õ—é–±–æ–π –∞—É–¥–∏–æ
                "div[class*='participant']",  # –£—á–∞—Å—Ç–Ω–∏–∫–∏
                "div[class*='meeting']",  # –≠–ª–µ–º–µ–Ω—Ç—ã –≤—Å—Ç—Ä–µ—á–∏
            ]
            
            found_indicators = 0
            for indicator in meeting_indicators:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, indicator)
                    if elements:
                        found_indicators += 1
                        logger.info(f"–ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Å—Ç—Ä–µ—á–∏: {indicator} ({len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ {indicator}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
            has_active_media = False
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤
                media_elements = self.driver.find_elements(By.CSS_SELECTOR, "video, audio")
                for element in media_elements:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω
                        if element.get_attribute('src') or element.get_attribute('currentSrc'):
                            has_active_media = True
                            logger.info("–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –º–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç")
                            break
                    except:
                        continue
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–∏
            error_indicators = [
                "//div[contains(text(), 'Waiting for host')]",
                "//div[contains(text(), 'Meeting not started')]",
                "//div[contains(text(), 'Please wait')]",
                "//div[contains(text(), '–û–∂–∏–¥–∞–Ω–∏–µ')]",
                "//div[contains(text(), '–í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å')]",
                "//div[contains(text(), '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ')]",
            ]
            
            has_error = False
            for indicator in error_indicators:
                try:
                    elements = self.driver.find_elements(By.XPATH, indicator)
                    if elements:
                        has_error = True
                        logger.warning(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {indicator}")
                        break
                except:
                    continue
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            is_real_meeting = (
                in_meeting_platform and 
                found_indicators >= 2 and 
                not has_error and
                (has_active_media or found_indicators >= 3)  # –õ–∏–±–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–¥–∏–∞, –ª–∏–±–æ –º–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            )
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞={in_meeting_platform}, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã={found_indicators}, –º–µ–¥–∏–∞={has_active_media}, –æ—à–∏–±–∫–∏={has_error}")
            logger.info(f"–†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {is_real_meeting}")
            
            return is_real_meeting
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def _send_imitation_alert(self, meeting_url: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        import requests
        ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID', '')
        TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
        
        if not (ADMIN_CHAT_ID and TELEGRAM_BOT_TOKEN):
            logger.warning("ADMIN_CHAT_ID –∏–ª–∏ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        try:
            msg = f"üö® **Meeting Bot: –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!**\n\n"
            msg += f"üîó URL: {meeting_url}\n"
            msg += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            msg += "‚ùå –ë–æ—Ç –Ω–µ —Å–º–æ–≥ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ.\n"
            msg += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            msg += "‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
            msg += "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å\n"
            msg += "‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
            msg += "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å cookies"
            
            url_api = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            resp = requests.post(url_api, data={
                'chat_id': ADMIN_CHAT_ID,
                'text': msg,
                'parse_mode': 'Markdown'
            })
            
            if resp.status_code == 200:
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {resp.text}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–º–∏—Ç–∞—Ü–∏–∏: {e}")
    
    def _send_screenshot_to_admin(self, screenshot_path, meeting_url):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É –≤ Telegram"""
        import requests
        ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID', '')
        TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
        if not (ADMIN_CHAT_ID and TELEGRAM_BOT_TOKEN):
            logger.warning("ADMIN_CHAT_ID –∏–ª–∏ TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
            return
        try:
            with open(screenshot_path, 'rb') as img:
                files = {'photo': img}
                caption = f"‚ùå Meeting Bot –Ω–µ —Å–º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ!\nURL: {meeting_url}"
                url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
                resp = requests.post(url, data={
                    'chat_id': ADMIN_CHAT_ID,
                    'caption': caption
                }, files=files)
                if resp.status_code == 200:
                    logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É –≤ Telegram")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω—É: {resp.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
            return False
    
    def start_recording(self):
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ffmpeg –Ω–∞ –≤—Å—é –≤—Å—Ç—Ä–µ—á—É"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.audio_file = os.path.join(RECORD_DIR, f"meeting_{timestamp}.wav")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∞—É–¥–∏–æ –¥–ª—è Linux VPS
            # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            audio_sources = [
                ['ffmpeg', '-f', 'alsa', '-i', 'hw:0,0', '-ac', '2', '-ar', '16000', '-y', self.audio_file],
                ['ffmpeg', '-f', 'alsa', '-i', 'hw:0,1', '-ac', '2', '-ar', '16000', '-y', self.audio_file],
                ['ffmpeg', '-f', 'alsa', '-i', 'plughw:0,0', '-ac', '2', '-ar', '16000', '-y', self.audio_file],
                ['ffmpeg', '-f', 'alsa', '-i', 'plughw:0,1', '-ac', '2', '-ar', '16000', '-y', self.audio_file],
                ['ffmpeg', '-f', 'pulse', '-i', 'default', '-ac', '2', '-ar', '16000', '-y', self.audio_file],
                ['ffmpeg', '-f', 'alsa', '-i', 'default', '-ac', '2', '-ar', '16000', '-y', self.audio_file],
            ]
            
            for cmd in audio_sources:
                try:
                    self.recording_process = subprocess.Popen(
                        cmd,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE
                    )
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
                    time.sleep(1)
                    if self.recording_process.poll() is None:
                        self.recording = True
                        self.start_time = datetime.now()
                        self.meeting_active = True
                        logger.info(f"‚úÖ –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ –Ω–∞ –≤—Å—é –≤—Å—Ç—Ä–µ—á—É: {self.audio_file}")
                        logger.info(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å—Ç—Ä–µ—á–∏
                        self.start_meeting_monitoring()
                        return True
                    else:
                        logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {' '.join(cmd)}")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {cmd}: {e}")
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏: {e}")
            return False
    
    def start_meeting_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏"""
        try:
            import threading
            self.monitoring_task = threading.Thread(target=self._monitor_meeting, daemon=True)
            self.monitoring_task.start()
            logger.info("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def _monitor_meeting(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            while self.recording and self.meeting_active:
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                if not self.driver:
                    logger.info("üîç –î—Ä–∞–π–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    self.meeting_active = False
                    break
                
                try:
                    current_url = self.driver.current_url
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∏–Ω—É–ª–∏ –ª–∏ –≤—Å—Ç—Ä–µ—á—É
                    if "meet.google.com" not in current_url and "zoom.us" not in current_url:
                        logger.info("üîç –ü–æ–∫–∏–Ω—É–ª–∏ –≤—Å—Ç—Ä–µ—á—É - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å")
                        self.meeting_active = False
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏
                    try:
                        end_indicators = [
                            "//div[contains(text(), 'Everyone left')]",
                            "//div[contains(text(), 'Meeting ended')]",
                            "//div[contains(text(), '–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')]",
                            "//div[contains(text(), '–í—Å–µ –ø–æ–∫–∏–Ω—É–ª–∏')]",
                        ]
                        
                        for indicator in end_indicators:
                            elements = self.driver.find_elements(By.XPATH, indicator)
                            if elements:
                                logger.info("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏")
                                self.meeting_active = False
                                break
                        
                        if not self.meeting_active:
                            break
                            
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
                        
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Å—Ç—Ä–µ—á–∞ –∞–∫—Ç–∏–≤–Ω–∞
                    continue
            
            # –ï—Å–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–∞—Ä—É–∂–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
            if not self.meeting_active and self.recording:
                logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ - –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                self.stop_recording()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –≤—Å—Ç—Ä–µ—á–∏: {e}")
    
    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        try:
            self.meeting_active = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            
            if self.recording and self.recording_process:
                self.recording_process.terminate()
                try:
                    self.recording_process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    self.recording_process.kill()
                    self.recording_process.wait()
                
                self.recording = False
                logger.info("‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
                if os.path.exists(self.audio_file):
                    size = os.path.getsize(self.audio_file)
                    logger.info(f"–†–∞–∑–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç")
                    return True
                else:
                    logger.error("–§–∞–π–ª –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
            return False
    
    def transcribe_audio_whisper(self):
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Faster Whisper"""
        try:
            if not self.audio_file or not os.path.exists(self.audio_file):
                logger.error("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            if not self.whisper_model:
                logger.error("‚ùå Whisper –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return None
            
            file_size = os.path.getsize(self.audio_file)
            logger.info(f"üéôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ñ–∞–π–ª–∞: {self.audio_file} ({file_size} –±–∞–π—Ç)")
            
            if file_size < 1000:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å—å –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∑–∞–ø–∏—Å–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª, –≤–æ–∑–º–æ–∂–Ω–æ –∞—É–¥–∏–æ –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ"
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            segments, info = self.whisper_model.transcribe(
                self.audio_file,
                language="ru",
                beam_size=5,
                vad_filter=True,
                vad_parameters=dict(min_silence_duration_ms=500)
            )
            
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —è–∑—ã–∫: {info.language} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {info.language_probability:.2f})")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
            full_text = []
            for segment in segments:
                text = segment.text.strip()
                if text:
                    timestamp = f"[{self._format_timestamp(segment.start)} --> {self._format_timestamp(segment.end)}]"
                    full_text.append(f"{timestamp}\n{text}\n")
                    self.transcript.append({
                        "start": segment.start,
                        "end": segment.end,
                        "text": text
                    })
            
            if full_text:
                result = "\n".join(full_text)
                logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(self.transcript)}")
                return result
            else:
                logger.warning("‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç - —Ä–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                return "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç: —Ä–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ –∑–∞–ø–∏—Å–∏"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}"
    
    def _format_timestamp(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        return f"{hours:02d}:{minutes:02d}:{secs:02d}"
    
    def save_to_github(self, content: str, filename: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ GitHub"""
        try:
            if not self.repo:
                logger.warning("‚ö†Ô∏è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            path = f"transcripts/{filename}"
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                file = self.repo.get_contents(path)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                self.repo.update_file(
                    path,
                    f"Update transcript {filename}",
                    content,
                    file.sha,
                    branch="main"
                )
                logger.info(f"‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ GitHub: {path}")
            except:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                self.repo.create_file(
                    path,
                    f"Add transcript {filename}",
                    content,
                    branch="main"
                )
                logger.info(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω –≤ GitHub: {path}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ GitHub: {e}")
            return False
    
    def get_meeting_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ"""
        try:
            info = []
            info.append(f"üîó URL: {self.meeting_url}")
            info.append(f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {self.start_time.strftime('%Y-%m-%d %H:%M:%S') if self.start_time else 'N/A'}")
            
            if self.recording:
                duration = (datetime.now() - self.start_time).total_seconds() / 60
                info.append(f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} –º–∏–Ω")
            
            if self.audio_file and os.path.exists(self.audio_file):
                size_mb = os.path.getsize(self.audio_file) / (1024 * 1024)
                info.append(f"üíæ –†–∞–∑–º–µ—Ä –∑–∞–ø–∏—Å–∏: {size_mb:.2f} –ú–ë")
            
            return "\n".join(info)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"
    
    def leave_meeting(self):
        """–ü–æ–∫–∏–Ω—É—Ç—å –≤—Å—Ç—Ä–µ—á—É"""
        try:
            if self.driver:
                self.driver.quit()
                self.driver = None
            logger.info("üëã –ü–æ–∫–∏–Ω—É–ª–∏ –≤—Å—Ç—Ä–µ—á—É")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≤—Å—Ç—Ä–µ—á–∏: {e}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.meeting_active = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.leave_meeting()
        if self.recording:
            self.stop_recording()
        # –ù–µ —É–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
active_bots: Dict[int, MeetingBot] = {}


# Telegram Bot Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data='status')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "ü§ñ *Meeting Bot v2.2* - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—á–∞—Å—Ç–∏–µ –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö\n\n"
        "‚úÖ *–ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—å –Ω–∞ –≤—Å—é –≤—Å—Ç—Ä–µ—á—É (–ù–ï 3 –º–∏–Ω—É—Ç—ã!)*\n"
        "‚úÖ *–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≤—Å—Ç—Ä–µ—á–∞–º*\n\n"
        "üìù *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:*\n"
        "‚Ä¢ Google Meet\n"
        "‚Ä¢ Zoom\n"
        "‚Ä¢ –Ø–Ω–¥–µ–∫—Å –¢–µ–ª–µ–º–æ—Å—Ç\n"
        "‚Ä¢ –ö–æ–Ω—Ç—É—Ä.–¢–æ–ª–∫\n\n"
        "üì§ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É, –∏ –±–æ—Ç:\n"
        "1Ô∏è‚É£ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ\n"
        "2Ô∏è‚É£ –ó–∞–ø–∏—à–µ—Ç –∞—É–¥–∏–æ –ù–ê –í–°–Æ –í–°–¢–†–ï–ß–£\n"
        "3Ô∏è‚É£ –°–æ–∑–¥–∞—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç\n"
        "4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–º\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã! üöÄ"
    )
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*\n\n"
        "*–®–∞–≥ 1:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É\n"
        "–ü—Ä–∏–º–µ—Ä: `https://meet.google.com/abc-defg-hij`\n\n"
        "*–®–∞–≥ 2:* –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∏ –Ω–∞—á–Ω–µ—Ç –∑–∞–ø–∏—Å—å\n\n"
        "*–®–∞–≥ 3:* –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤—Å—Ç—Ä–µ—á–µ–π\n"
        "‚Ä¢ ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
        "‚Ä¢ üö™ –ü–æ–∫–∏–Ω—É—Ç—å –≤—Å—Ç—Ä–µ—á—É\n"
        "‚Ä¢ üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n\n"
        "*–®–∞–≥ 4:* –ü–æ–ª—É—á–∏—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç\n"
        "–ü–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç\n\n"
        "*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:*\n"
        "‚Ä¢ `meet.google.com/xxx`\n"
        "‚Ä¢ `zoom.us/j/xxx`\n"
        "‚Ä¢ `telemost.yandex.ru/xxx`\n"
        "‚Ä¢ `talk.contour.ru/xxx`\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å"
    )
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = update.effective_user.id
    bot = active_bots.get(user_id)
    
    if bot and bot.recording:
        info = bot.get_meeting_info()
        status_text = f"üü¢ *–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω*\n\n{info}"
    else:
        status_text = "üî¥ *–°—Ç–∞—Ç—É—Å: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω*\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á"
    
    await update.message.reply_text(status_text, parse_mode='Markdown')


async def handle_meeting_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL –≤—Å—Ç—Ä–µ—á–∏"""
    url = update.message.text.strip()
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç
    if user_id in active_bots:
        await update.message.reply_text(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞!\n"
            "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É."
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏
    bot = MeetingBot()
    meeting_type = bot.detect_meeting_type(url)
    
    if meeting_type == 'unknown':
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≤—Å—Ç—Ä–µ—á–∏.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n"
            "‚Ä¢ Google Meet (meet.google.com)\n"
            "‚Ä¢ Zoom (zoom.us)\n"
            "‚Ä¢ –Ø–Ω–¥–µ–∫—Å –¢–µ–ª–µ–º–æ—Å—Ç (telemost.yandex.ru)\n"
            "‚Ä¢ –ö–æ–Ω—Ç—É—Ä.–¢–æ–ª–∫ (talk.contour.ru)"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    status_msg = await update.message.reply_text("üéØ **–í—Å—Ç—Ä–µ—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!**\n\nüîó **URL:** " + url + "\n\nüöÄ **–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...**")
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
        await status_msg.edit_text("üéØ **–í—Å—Ç—Ä–µ—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!**\n\nüîó **URL:** " + url + "\n\nüöÄ **–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...**\n‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
        bot.setup_driver(headless=True)  # Headless —Ä–µ–∂–∏–º –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ
        meeting_names = {
            'google_meet': 'Google Meet',
            'zoom': 'Zoom',
            'yandex': '–Ø–Ω–¥–µ–∫—Å –¢–µ–ª–µ–º–æ—Å—Ç',
            'contour': '–ö–æ–Ω—Ç—É—Ä.–¢–æ–ª–∫'
        }
        
        await status_msg.edit_text("üéØ **–í—Å—Ç—Ä–µ—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!**\n\nüîó **URL:** " + url + "\n\nüöÄ **–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...**\n‚è≥ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ " + meeting_names.get(meeting_type, '–≤—Å—Ç—Ä–µ—á–µ') + "...")
        
        success = False
        if meeting_type == 'google_meet':
            success = bot.join_google_meet(url)
        elif meeting_type == 'zoom':
            success = bot.join_zoom_meeting(url)
        elif meeting_type == 'yandex':
            success = bot.join_yandex_telemost(url)
        elif meeting_type == 'contour':
            success = bot.join_contour_talk(url)
        
        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—Å—Ç—Ä–µ—á–µ
            in_real_meeting = bot._verify_real_meeting_connection()
            
            if in_real_meeting:
                await status_msg.edit_text("üéØ **–í—Å—Ç—Ä–µ—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!**\n\nüîó **URL:** " + url + "\n\nüöÄ **–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...**\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ!")
                
                # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
                await update.message.reply_text("üéôÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞—é –∞—É–¥–∏–æ –≤—Å—Ç—Ä–µ—á–∏...")
                
                if bot.start_recording():
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
                    active_bots[user_id] = bot
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    info = bot.get_meeting_info()
                    keyboard = [
                        [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å", callback_data='stop_and_transcribe')],
                        [InlineKeyboardButton("üö™ –ü–æ–∫–∏–Ω—É—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data='leave_meeting')],
                        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data='status')]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(info, reply_markup=reply_markup)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å—Ç—Ä–µ—á–∏
                    bot.start_meeting_monitoring()
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ!")
                    bot.cleanup()
            else:
                # –ù–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
                await status_msg.edit_text("‚ùå –ë–æ—Ç –Ω–µ —Å–º–æ–≥ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ!\n\n–í–æ–∑–º–æ–∂–Ω–∞ –∏–º–∏—Ç–∞—Ü–∏—è. –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞—á–∞—Ç–∞.")
                bot._send_imitation_alert(url)
                bot.cleanup()
        else:
            error_text = (
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
                "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å\n"
            )
            await status_msg.edit_text(error_text)
            bot.cleanup()
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å—Ç—Ä–µ—á–∏: {e}")
        await status_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        if 'bot' in locals():
            bot.cleanup()


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    bot = active_bots.get(user_id)
    
    if query.data == 'stop_and_transcribe':
        if not bot:
            await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏")
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
        bot.stop_recording()
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        await query.edit_message_text("üéôÔ∏è –°–æ–∑–¥–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç...")
        transcript = bot.transcribe_audio_whisper()
        
        if transcript:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"transcript_{timestamp}.txt"
            
            report = f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤—Å—Ç—Ä–µ—á–∏\n"
            report += f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            report += f"üîó URL: {bot.meeting_url}\n"
            report += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {bot.get_meeting_info()}\n\n"
            report += "=" * 50 + "\n\n"
            report += transcript
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GitHub
            if bot.save_to_github(report, filename):
                await query.message.reply_text(
                    f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ GitHub: `{filename}`",
                    parse_mode='Markdown'
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_file = os.path.join(RECORD_DIR, filename)
                with open(temp_file, 'w', encoding='utf-8') as f:
                    f.write(report)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                with open(temp_file, 'rb') as f:
                    await query.message.reply_document(
                        document=f,
                        filename=filename,
                        caption="üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤—Å—Ç—Ä–µ—á–∏ –≥–æ—Ç–æ–≤!"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(temp_file)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
                if len(report) < 4000:
                    await query.message.reply_text(f"```\n{report}\n```", parse_mode='Markdown')
                else:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                    parts = [report[i:i+4000] for i in range(0, len(report), 4000)]
                    for i, part in enumerate(parts, 1):
                        await query.message.reply_text(
                            f"üìù –ß–∞—Å—Ç—å {i}/{len(parts)}:\n```\n{part}\n```",
                            parse_mode='Markdown'
                        )
        else:
            await query.message.reply_text(f"‚ùå {transcript or '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç'}")
        
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        bot.cleanup()
        if user_id in active_bots:
            del active_bots[user_id]
        
        await query.message.reply_text("‚úÖ –í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏.")
    
    elif query.data == 'leave_meeting':
        if not bot:
            await query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏")
            return
        
        bot.cleanup()
        if user_id in active_bots:
            del active_bots[user_id]
        
        await query.edit_message_text("üëã –ü–æ–∫–∏–Ω—É–ª –≤—Å—Ç—Ä–µ—á—É. –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    
    elif query.data == 'status':
        if bot and bot.recording:
            info = bot.get_meeting_info()
            await query.message.reply_text(f"üü¢ *–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω*\n\n{info}", parse_mode='Markdown')
        else:
            await query.message.reply_text("üî¥ *–°—Ç–∞—Ç—É—Å: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω*\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á", parse_mode='Markdown')
    
    elif query.data == 'help':
        await help_command(query, context)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        sys.exit(1)
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Meeting Bot v2.2...")
    logger.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—å –Ω–∞ –≤—Å—é –≤—Å—Ç—Ä–µ—á—É (–ù–ï 3 –º–∏–Ω—É—Ç—ã!)")
    logger.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≤—Å—Ç—Ä–µ—á–∞–º")
    logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π: {RECORD_DIR}")
    logger.info(f"üé§ –ú–æ–¥–µ–ª—å Whisper: {WHISPER_MODEL}")
    logger.info(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –≤—Å—Ç—Ä–µ—á–∏: {MEETING_TIMEOUT_MIN} –º–∏–Ω—É—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        logger.info("‚úÖ ffmpeg –Ω–∞–π–¥–µ–Ω")
    except:
        logger.error("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: apt-get install ffmpeg")
    
    try:
        subprocess.run(['google-chrome', '--version'], capture_output=True, check=True)
        logger.info("‚úÖ Google Chrome –Ω–∞–π–¥–µ–Ω")
    except:
        logger.warning("‚ö†Ô∏è Google Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è—é Chromium...")
        try:
            subprocess.run(['chromium', '--version'], capture_output=True, check=True)
            logger.info("‚úÖ Chromium –Ω–∞–π–¥–µ–Ω")
        except:
            logger.error("‚ùå Chrome/Chromium –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_meeting_url))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ Meeting Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –≤ Telegram
        import requests
        ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID', '')
        TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
        if ADMIN_CHAT_ID and TELEGRAM_BOT_TOKEN:
            msg = f"‚ùå Meeting Bot —É–ø–∞–ª!\n\n–û—à–∏–±–∫–∞: {e}"
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            try:
                requests.post(url, data={
                    'chat_id': ADMIN_CHAT_ID,
                    'text': msg,
                    'parse_mode': 'Markdown'
                })
            except Exception as err:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {err}")
        sys.exit(1)