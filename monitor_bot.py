#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Meeting Bot - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
"""

import os
import sys
import time
import subprocess
import requests
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BotMonitor:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.admin_chat_id = os.getenv('ADMIN_CHAT_ID')
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.max_restart_attempts = 3
        self.restart_attempts = 0
        
    def send_telegram_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        if not self.bot_token or not self.admin_chat_id:
            logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
            
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': self.admin_chat_id,
                'text': f"ü§ñ Meeting Bot Monitor\n\n{message}",
                'parse_mode': 'Markdown'
            }
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ"""
        try:
            import socket
            hostname = socket.gethostname()
            ip = socket.gethostbyname(hostname)
            
            message = f"üöÄ **Meeting Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!**\n\n"
            message += f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {hostname}\n"
            message += f"üåê IP: {ip}\n"
            message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            message += f"üìä –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ 24/7"
            
            self.send_telegram_notification(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    def check_bot_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            result = subprocess.run(
                ['systemctl', 'is-active', 'meeting-bot'],
                capture_output=True,
                text=True,
                timeout=10
            )
            return result.stdout.strip() == 'active'
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        try:
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Meeting Bot...")
            subprocess.run(['systemctl', 'restart', 'meeting-bot'], timeout=30)
            time.sleep(10)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            
            if self.check_bot_status():
                logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                self.restart_attempts = 0
                self.send_telegram_notification("‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
                self.restart_attempts += 1
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            self.restart_attempts += 1
            return False
    
    def get_bot_logs(self, lines=50):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞"""
        try:
            result = subprocess.run(
                ['journalctl', '-u', 'meeting-bot', '-n', str(lines), '--no-pager'],
                capture_output=True,
                text=True,
                timeout=30
            )
            return result.stdout
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏"
    
    def monitor(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Meeting Bot...")
        self.send_startup_notification()
        
        last_check = datetime.now()
        
        while True:
            try:
                current_time = datetime.now()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
                if not self.check_bot_status():
                    logger.warning("–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    
                    if self.restart_attempts < self.max_restart_attempts:
                        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {self.restart_attempts + 1}/{self.max_restart_attempts}")
                        
                        if self.restart_bot():
                            continue
                        else:
                            logger.error("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è")
                    else:
                        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                        self.send_telegram_notification(
                            f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!\n\n"
                            f"–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ {self.max_restart_attempts} –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.\n"
                            f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!\n\n"
                            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n```\n{self.get_bot_logs(20)}\n```"
                        )
                        self.restart_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                if (current_time - last_check).total_seconds() > 86400:  # 24 —á–∞—Å–∞
                    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞")
                    self.send_telegram_notification(
                        f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å\n\n"
                        f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n"
                        f"‚è∞ –í—Ä–µ–º—è: {current_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                        f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: {self.restart_attempts}"
                    )
                    last_check = current_time
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                time.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                self.send_telegram_notification("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = BotMonitor()
    monitor.monitor()

if __name__ == "__main__":
    main()
